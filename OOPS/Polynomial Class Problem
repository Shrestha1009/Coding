import java.util.Scanner;

public class Polynomial {
    
    private int coefficient[];
    private int degree;
    
    public Polynomial(){
        coefficient = new int[5];
        degree = -1;
    }
    
    
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			result = first.multiply(second);
			result.print();
			break;
		}

	}
	
	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
	public void setCoefficient(int degree, int coeff){
        if(degree >= coefficient.length){
            doubleCapacity(degree);
        }
        coefficient[degree] = coeff;
        if(degree>= this.degree){
            this.degree = degree;
        }
		
	}
    
    private void doubleCapacity(int d){
        int temp[] = coefficient;
        coefficient = new int[d+1];
        for(int i=0; i<temp.length; i++){
            coefficient[i] = temp[i];
        }
    }
	
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
	public void print(){
		for(int i=0; i<coefficient.length; i++) {
    		if(coefficient[i] != 0) {
    			System.out.print(coefficient[i]+"x"+i+" ");
    		}
    	}
	}

	
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p){
        Polynomial poly = new Polynomial();
        int i=0, j=0, k=0;
        while(i< p.coefficient.length && j<this.coefficient.length){
            poly.setCoefficient(k, p.coefficient[i] + this.coefficient[i]);
            i++;
            j++;
            k++;
        }
        while(i< p.coefficient.length){
            poly.setCoefficient(k, p.coefficient[i]);
            i++;
            k++;
        }
        
        while(j< this.coefficient.length){
            poly.setCoefficient(k, this.coefficient[j]);
            j++;
            k++;
        }
		return poly;
	}
	
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p){
        Polynomial poly = new Polynomial();
        int i=0, j=0, k=0;
        while(i< p.coefficient.length && j<this.coefficient.length){
            poly.setCoefficient(k, this.coefficient[i] - p.coefficient[i]);
            i++;
            j++;
            k++;
        }
        while(i< p.coefficient.length){
            poly.setCoefficient(k, -p.coefficient[i]);
            i++;
            k++;
        }
        
        while(j< this.coefficient.length){
            poly.setCoefficient(k, this.coefficient[j]);
            j++;
            k++;
        }
		return poly;
			
	}
	
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p){
		Polynomial x = new Polynomial();
        for(int i=0; i < p.coefficient.length; i++) {
			for(int j=0; j<this.coefficient.length; j++) {
				if(i + j <=x.degree)
					x.setCoefficient( i + j ,x.coefficient[i+j]+p.coefficient[i] * this.coefficient[j]);
				else
					x.setCoefficient(i + j ,p.coefficient[i] * this.coefficient[j]);
			}
		}
		return x;
	}

}
